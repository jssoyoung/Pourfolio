{"version":3,"sources":["utils/reducers.js","utils/actions.js","utils/GlobalState.js","pages/Home.js","pages/Cellar.js","pages/Signup.js","pages/Setting.js","pages/Search.js","ui/Logo.js","ui/Navigation.js","ui/Header.js","ui/AppLayout.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","type","_objectSpread","products","_toConsumableArray","cartOpen","cart","concat","product","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","_ref","value","initialState","props","_objectWithoutProperties","_excluded","_useProductReducer","useReducer","_useProductReducer2","_slicedToArray","dispatch","_jsx","Home","children","Cellar","Signup","Setting","Search","StyledDiv","styled","div","_templateObject","_taggedTemplateLiteral","Logo","Navigation","_jsxs","Header","Link","to","AppLayout","Outlet","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","Router","Routes","Route","element","index","Navigate","replace","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","React","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ea61441a.chunk.js","sourcesContent":["import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","import React from 'react';\n\nfunction Home() {\n  return <div>Home</div>;\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction Cellar() {\n  return <div>Cellar</div>;\n}\n\nexport default Cellar;\n","import React from 'react';\n\nfunction Signup() {\n  return <div>Signup</div>;\n}\n\nexport default Signup;\n","import React from 'react';\n\nfunction Setting() {\n  return <div>Settings</div>;\n}\n\nexport default Setting;\n","import React from 'react';\n\nfunction Search() {\n  return <div>Search</div>;\n}\n\nexport default Search;\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDiv = styled.div`\r\n  background-color: blue;\r\n`;\r\n\r\nfunction Logo() {\r\n  return <StyledDiv>Logo</StyledDiv>;\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nfunction Navigation() {\r\n  return (\r\n    <div>\r\n      <input type=\"checkbox\"></input>;\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from './Logo';\r\nimport Navigation from './Navigation';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <Logo />\r\n      <Link to=\"/signup\">Sign Up</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Outlet } from 'react-router-dom';\r\nimport Header from './Header';\r\n\r\nfunction AppLayout() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Outlet />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppLayout;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport { StoreProvider } from './utils/GlobalState';\nimport Home from './pages/Home';\nimport Cellar from './pages/Cellar';\nimport Signup from './pages/Signup';\nimport Setting from './pages/Setting';\nimport Search from './pages/Search';\n\nimport AppLayout from './ui/AppLayout';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Routes>\n              <Route element={<AppLayout />}>\n                <Route index element={<Navigate replace to=\"/\" />} />\n                <Route path=\"/\" element={<Home />} />\n                <Route path=\"/signup\" element={<Signup />} />\n                <Route path=\"/setting\" element={<Setting />} />\n                <Route path=\"/search\" element={<Search />} />\n                <Route path=\"/cellar\" element={<Cellar />} />\n              </Route>\n            </Routes>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}